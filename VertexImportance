import java.util.Arrays;
import java.util.Random;

public class VertexImportance {

    public static Graph getExample() {
        // Create a directed MatrixGraph with 4 vertices (0, 1, 2, 3)
        MatrixGraph graph = new MatrixGraph(4, Graph.DIRECTED_GRAPH);

        // Add edges according to the example provided
        graph.addEdge(0, 1);
        graph.addEdge(0, 3);
        graph.addEdge(1, 3);
        graph.addEdge(2, 0);
        graph.addEdge(2, 1);
        graph.addEdge(3, 2);

        return graph;
    }

    public static Graph getRandomGraph() {
        MatrixGraph graph = new MatrixGraph(20, Graph.DIRECTED_GRAPH);
        Random random = new Random();

        // Define the levels
        int[][] levels = {
                {0, 1, 2, 3, 4},    // Level 0
                {5, 6, 7, 8, 9},    // Level 1
                {10, 11, 12, 13, 14}, // Level 2
                {15, 16, 17, 18, 19}  // Level 3
        };

        // Add edges between levels with probability 1/3
        for (int i = 0; i < levels.length - 1; i++) {
            for (int x : levels[i]) {
                for (int y : levels[i + 1]) {
                    if (random.nextDouble() < 1.0 / 3.0) {
                        graph.addEdge(x, y);
                    }
                }
            }
        }

        return graph;
    }

    public static void augment(Graph g) {
        int numVertices = g.numVertices();

        for (int v = 0; v < numVertices; v++) {
            if (g.outDegree(v) == 0) {
                for (int u = 0; u < numVertices; u++) {
                    if (u != v) {
                        g.addEdge(v, u);
                    }
                }
            }
        }
    }

    public static double[] calculateImportance(Graph graph) {
        int numVertices = graph.numVertices();
        double[] isImportant = new double[numVertices];
        double[] newImportances = new double[numVertices];
        Arrays.fill(isImportant, 1.0);

        boolean hasConverged;
        double threshold = 0.001;
        do {
            hasConverged = true;
            for (int v = 0; v < numVertices; v++) {
                double importanceSum = 0.0;
                int[] inNeighbours = graph.inNeighbours(v);
                for (int w : inNeighbours) {
                    importanceSum += isImportant[w] / graph.outDegree(w);
                }
                double newImportant = 0.1 + 0.9 * importanceSum;
                newImportances[v] = newImportant;
                if (Math.abs(newImportant - isImportant[v]) > threshold) {
                    hasConverged = false;
                }
            }
            System.arraycopy(newImportances, 0, isImportant, 0, numVertices);
        } while (!hasConverged);

        return isImportant;
    }

    public static double[] getVertexImportance(Graph g) {
        // Step 1: Augment the graph
        augment(g);

        // Step 2-4: Calculate importance iteratively until convergence
        return calculateImportance(g);
    }

    public static void main(String[] args) {
        // Task 1: Generate the example graph and calculate vertex importances
        Graph exampleGraph = VertexImportance.getExample();
        System.out.println("Example Graph Created:");
        printGraph(exampleGraph);

        double[] exampleImportances = getVertexImportance(exampleGraph);
        System.out.println("Vertex Importances for Example Graph: " + Arrays.toString(exampleImportances));

        // Task 2: Generate 1,000 random graphs, compute vertex importances, and calculate average importance for vertices 0-4
        int numRandomGraphs = 1000;
        double[] avgImportance = new double[5];
        Arrays.fill(avgImportance, 0.0);

        for (int i = 0; i < numRandomGraphs; i++) {
            Graph randomGraph = VertexImportance.getRandomGraph();
            double[] importances = getVertexImportance(randomGraph);
            for (int j = 0; j < 5; j++) {
                avgImportance[j] += importances[j];
            }
        }

        for (int j = 0; j < 5; j++) {
            avgImportance[j] /= numRandomGraphs;
        }

        System.out.println("Average Importances for Vertices 0-4 across 1,000 Random Graphs: " + Arrays.toString(avgImportance));
    }

    private static void printGraph(Graph graph) {
        for (int i = 0; i < graph.numVertices(); i++) {
            System.out.println("Vertex " + i + ":");
            System.out.println("  Out-neighbours: " + Arrays.toString(graph.outNeighbours(i)));
            System.out.println("  In-neighbours: " + Arrays.toString(graph.inNeighbours(i)));
        }
    }
}
